
// const output = require('../middleware/api.output.hanndler')
// const FolderName = '../api/financial/'
const { parseFileContent } = require('doctrine-file')
const glob = require('glob')
const path = require('path')
// const postprocess = require('../middleware/api.output.hanndler')
const fs = require('fs')

/**
 *
 * @param {object} app
 * @param {string} apiFolderNe
 * @param {function} postProcess
 * @param {object} option
 */

function createRouter (app, postProcess = function (req, res, next) {
  var patten =
    {
      response: {
        result: 'true',
        remark: 'success',
        code: res.httpcode || 200
      },
      data: res.body
    }
  res.status(res.httpcode || 200).json(patten)
}, option = { swaggerDefinition: {} }) {
  const router = app

  const apiFiles = convertGlobPaths(option.basedir, option.files)
  apiFiles.forEach(function (file) {
    try {
    // Load logic file
      const apiLogic = require(file)
      // Read file content as text
      const content = fs.readFileSync(require('path').join(file), 'utf-8')
      // parse comment docs
      const comments = parseFileContent(content)
      // get @Route Description
      const docsComment = comments[0].tags[0].description.split(' ')
      // define method & route
      const docsMethod = docsComment[0]
   
      const docsRoute = docsComment[1]? option.swaggerDefinition.basePath + docsComment[1].replace(/}/g, '').replace(/{/g, ':') : 'Can\'t create route'

      console.log(docsMethod + ': ', docsRoute)
      if(docsRoute=== 'Can\'t create route')
      {
        console.log('\033[31m Can\'t create route')
        throw  'Can\'t create route';
      }

      // Create Route from document
      if (docsMethod === 'GET') {
        router.route(docsRoute)
          .get([apiLogic].concat(postProcess))
      } else if (docsMethod === 'POST') {
        router.route(docsRoute)
          .post([apiLogic].concat(postProcess))
      } else if (docsMethod === 'PUT') {
        router.route(docsRoute)
          .put([apiLogic].concat(postProcess))       
      } else if (docsMethod === 'PATCH') {
        router.route(docsRoute)
          .patch([apiLogic].concat(postProcess))        
      } else if (docsMethod === 'DELETE') {
        router.route(docsRoute)
          .delete([apiLogic].concat(postProcess))
      } else {
        console.log('Method ' + docsMethod + ' doesn\'t suppport in file [' + file + '] ')
      }
    } catch (e) {
      console.log('Files [' + file + '] can\'t import to route \n' )
      console.error(e)
    }
  })

  // return router
}

/**
 * Converts an array of globs to full paths
 * @function
 * @param {array} globs - Array of globs and/or normal paths
 * @return {array} Array of fully-qualified paths
 * @requires glob
 */
function convertGlobPaths (base, globs) {
  return globs.reduce(function (acc, globString) {
    const globFiles = glob.sync(path.resolve(base, globString))
    return acc.concat(globFiles)
  }, [])
}

module.exports = createRouter
